hub:
  config:
    JupyterHub:
      GenericOAuthenticator:
        # grant access based on JHE organization membership
        manage_groups: true
        auth_state_groups_key: "organizations"
        allowed_groups:
          # the integer id (in quotes) in JHE of organizations to allow access to the Hub
          - "2XXXX"
    extraConfig:
      # get organization membership for managed groups:
      managed_organizations.py: |
        from urllib.parse import urlparse

        async def auth_state_hook(authenticator, auth_state):
            if not auth_state:
                return auth_state
            access_token = auth_state["access_token"]
            url = urlparse(authenticator.authorize_url)
            org_url = f"{url.scheme}://{url.netloc}/api/v1/users/organizations"
            organizations = await authenticator.httpfetch(
                org_url,
                headers={"Authorization": f"Bearer {access_token}"}
            )
            # use string ids for now
            auth_state["organizations"] = [str(org['id']) for org in organizations]
            return auth_state

        c.OAuthenticator.modify_auth_state_hook = auth_state_hook
